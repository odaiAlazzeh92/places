{"version":3,"file":"static/js/191.f87c8ab7.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js","user/pages/Auth.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n\r\n  const pickedHandler = (event) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    \r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        ref={filePickerRef}\r\n        id={props.id}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import { useReducer, useEffect } from \"react\";\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCH\":\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function Input(props) {\r\n  const initialState = {\r\n    value: props.value || \"\",\r\n    isValid: props.valid || false,\r\n    isTouched: false,\r\n  };\r\n\r\n  const [inputState, dispatch] = useReducer(inputReducer, initialState);\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, onInput, value, isValid]);\r\n\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: \"TOUCH\",\r\n    });\r\n  };\r\n\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        row={props.row || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const input in state.inputs) {\r\n        if(!state.inputs[input]){\r\n          continue\r\n        }\r\n        if (input === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[input].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n\r\n      case \"SET_DATA\":\r\n        return {\r\n          inputs: action.inputs,\r\n          isValid: action.formIsValid,\r\n        };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useForm(initialInputs, initialFormValidity) {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    })\r\n  },[]);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n}\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import { useState, useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport \"./Auth.css\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\n// export default function Auth() {\r\nexport  function Component() {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    if (!isLoginMode) {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/api/users/signup\",\r\n          \"POST\",\r\n          formData\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n        navigate(\"/\");\r\n      } catch (err) {\r\n        throw new Error(err.message);\r\n      }\r\n    } else {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/api/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n        navigate(\"/\");\r\n      } catch (err) {\r\n        throw new Error(err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner isOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              label=\"Your Name\"\r\n              type=\"text\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name.\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image\"\r\n            />\r\n          )}\r\n          <Input\r\n            id=\"email\"\r\n            element=\"input\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nComponent.displayName = \"Auth\";\r\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","ref","id","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","_objectSpread","value","val","validate","validators","isTouched","Input","initialState","valid","_useReducer","useReducer","_useReducer2","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","row","htmlFor","label","formReducer","formIsValid","input","inputs","inputId","_defineProperty","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","test","err","e","f","Component","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useForm","email","password","_useForm2","inputHandler","setFormData","navigate","useNavigate","authSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formData","responseData","_responseData","wrap","_context","prev","next","preventDefault","FormData","append","name","image","process","sent","login","userId","token","t0","Error","message","JSON","stringify","t1","stop","_x","apply","arguments","_Fragment","ErrorModal","onClear","Card","LoadingSpinner","isOverlay","onSubmit","ImageUpload","disabled","inverse","undefined","prevMode","displayName"],"sourceRoot":""}