{"version":3,"file":"static/js/925.6a2f3c53.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport \"./PlaceForm.css\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\"\r\n\r\n\r\n\r\nexport function Component(props) {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n  const { placeId } = useParams();\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const authCtx = useContext(AuthContext)\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + `/api/places/${placeId}`\r\n        );\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (err) {}\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        process.env.REACT_APP_BACKEND_URL + `/api/places/${placeId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + authCtx.token\r\n        }\r\n      );\r\n      navigate(`/${authCtx.userId}/places`);\r\n    } catch (err) {}\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner asOrlay />\r\n      </div>\r\n    );\r\n  }\r\n  setTimeout(() => {\r\n    if (!loadedPlace && !error) {\r\n      return (\r\n        <div className=\"center\">\r\n          <Card>\r\n            <h2>Could not find place!</h2>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title\"\r\n            onInput={inputHandler}\r\n            value={loadedPlace.title}\r\n            valid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description (min. 5 characters).\"\r\n            onInput={inputHandler}\r\n            value={loadedPlace.description}\r\n            valid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nComponent.displayName = \"UpdatePlace\";\r\n","import { useReducer, useEffect } from \"react\";\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCH\":\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function Input(props) {\r\n  const initialState = {\r\n    value: props.value || \"\",\r\n    isValid: props.valid || false,\r\n    isTouched: false,\r\n  };\r\n\r\n  const [inputState, dispatch] = useReducer(inputReducer, initialState);\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, onInput, value, isValid]);\r\n\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: \"TOUCH\",\r\n    });\r\n  };\r\n\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        row={props.row || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const input in state.inputs) {\r\n        if(!state.inputs[input]){\r\n          continue\r\n        }\r\n        if (input === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[input].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n\r\n      case \"SET_DATA\":\r\n        return {\r\n          inputs: action.inputs,\r\n          isValid: action.formIsValid,\r\n        };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useForm(initialInputs, initialFormValidity) {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    })\r\n  },[]);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n}\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n"],"names":["Component","props","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useState","useState","_useState2","_slicedToArray","loadedPlace","setLoadedPlace","placeId","useParams","_useForm","useForm","title","value","isValid","description","_useForm2","formState","inputHandler","setFormData","authCtx","useContext","AuthContext","navigate","useNavigate","useEffect","fetchPlace","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","wrap","_context","prev","next","process","concat","sent","place","t0","stop","apply","arguments","placeUpdateSubmitHandler","_ref2","_callee2","event","_context2","preventDefault","JSON","stringify","inputs","Authorization","token","userId","_x","_jsx","className","children","LoadingSpinner","asOrlay","setTimeout","Card","_jsxs","_Fragment","ErrorModal","onClear","onSubmit","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","valid","VALIDATOR_MINLENGTH","Button","disabled","displayName","inputReducer","state","action","_objectSpread","val","validate","isTouched","initialState","_useReducer","useReducer","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","placeholder","onChange","onBlur","row","htmlFor","formReducer","formIsValid","input","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","length","test","err","e","f"],"sourceRoot":""}